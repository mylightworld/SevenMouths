//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace SevenMouths.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Cosite))]
    [KnownType(typeof(User))]
    public partial class CositeUser: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CoSiteUserId
        {
            get { return _coSiteUserId; }
            set
            {
                if (_coSiteUserId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CoSiteUserId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _coSiteUserId = value;
                    OnPropertyChanged("CoSiteUserId");
                }
            }
        }
        private int _coSiteUserId;
    
        [DataMember]
        public Nullable<int> CoSiteId
        {
            get { return _coSiteId; }
            set
            {
                if (_coSiteId != value)
                {
                    ChangeTracker.RecordOriginalValue("CoSiteId", _coSiteId);
                    if (!IsDeserializing)
                    {
                        if (cosite != null && cosite.CoSiteId != value)
                        {
                            cosite = null;
                        }
                    }
                    _coSiteId = value;
                    OnPropertyChanged("CoSiteId");
                }
            }
        }
        private Nullable<int> _coSiteId;
    
        [DataMember]
        public Nullable<int> UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    ChangeTracker.RecordOriginalValue("UserId", _userId);
                    if (!IsDeserializing)
                    {
                        if (user != null && user.UserId != value)
                        {
                            user = null;
                        }
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private Nullable<int> _userId;
    
        [DataMember]
        public string AppKey
        {
            get { return _appKey; }
            set
            {
                if (_appKey != value)
                {
                    _appKey = value;
                    OnPropertyChanged("AppKey");
                }
            }
        }
        private string _appKey;
    
        [DataMember]
        public string AppSecreteKey
        {
            get { return _appSecreteKey; }
            set
            {
                if (_appSecreteKey != value)
                {
                    _appSecreteKey = value;
                    OnPropertyChanged("AppSecreteKey");
                }
            }
        }
        private string _appSecreteKey;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Cosite cosite
        {
            get { return _cosite; }
            set
            {
                if (!ReferenceEquals(_cosite, value))
                {
                    var previousValue = _cosite;
                    _cosite = value;
                    Fixupcosite(previousValue);
                    OnNavigationPropertyChanged("cosite");
                }
            }
        }
        private Cosite _cosite;
    
        [DataMember]
        public User user
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    Fixupuser(previousValue);
                    OnNavigationPropertyChanged("user");
                }
            }
        }
        private User _user;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            cosite = null;
            user = null;
        }

        #endregion
        #region Association Fixup
    
        private void Fixupcosite(Cosite previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.cositeusers.Contains(this))
            {
                previousValue.cositeusers.Remove(this);
            }
    
            if (cosite != null)
            {
                if (!cosite.cositeusers.Contains(this))
                {
                    cosite.cositeusers.Add(this);
                }
    
                CoSiteId = cosite.CoSiteId;
            }
            else if (!skipKeys)
            {
                CoSiteId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("cosite")
                    && (ChangeTracker.OriginalValues["cosite"] == cosite))
                {
                    ChangeTracker.OriginalValues.Remove("cosite");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("cosite", previousValue);
                }
                if (cosite != null && !cosite.ChangeTracker.ChangeTrackingEnabled)
                {
                    cosite.StartTracking();
                }
            }
        }
    
        private void Fixupuser(User previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.cositeusers.Contains(this))
            {
                previousValue.cositeusers.Remove(this);
            }
    
            if (user != null)
            {
                if (!user.cositeusers.Contains(this))
                {
                    user.cositeusers.Add(this);
                }
    
                UserId = user.UserId;
            }
            else if (!skipKeys)
            {
                UserId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("user")
                    && (ChangeTracker.OriginalValues["user"] == user))
                {
                    ChangeTracker.OriginalValues.Remove("user");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("user", previousValue);
                }
                if (user != null && !user.ChangeTracker.ChangeTrackingEnabled)
                {
                    user.StartTracking();
                }
            }
        }

        #endregion
    }
}
